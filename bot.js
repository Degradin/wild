const { VK, Keyboard } = require('vk-io');
const vk = new VK({
 	appId: 7473811,
 	appSecret: "VXsfCCEtcR0wQL3w2Y92",
 	token: "3a8bcc92f3f741592310d92ab5ed7e3d365f128733ef90c289525be20ad4da918d4e675043eb0e4fc92e2",
 	apiMode: "parallel",
 	pollingGroupId: 184999488
 });
const {updates, api, snippets, upload} = vk;
const fs = require("fs");
const request = require('prequest');
const users = require("./base/users.json")

setInterval(function(){
	fs.writeFileSync("./base/users.json", JSON.stringify(users, null, "\t"))
}, 5000);

vk.updates.use(async (context, next) => {
    context.user = context.senderId;
		if(context.isGroup == true) return;
		if(context.isOutbox) return;
		if(!context.text) return;
    if(context.is("context") && context.isOutbox) return;

      if(!users[context.user]){
      users[context.user] = {
        Nick: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`,
        Prefix: `–ò–≥—Ä–æ–∫`,
        Class: `–î—É—à–∞`,
        Dostup: 0,
        HP: 10,
        DMG: 1,
        Level: 0,
        Exp: 0,
        Points: 10,
        Rang: 0,
        Gold: 100,
        Wilds: 0,
        ResKey: 10,
        ItemKey: 10,
        registered: data()
      };
			vk.api.call('users.get', {
				user_ids: context.user,
				fields: "first_name, screen_name"
			}).then(res => {
				let user = res[0];
        users[context.user].Nick = user.first_name
			}).catch((error) => {console.log('err[prefix]'); });

				api.messages.send({
					user_id: 270911031,
					message: `üîî ‚ûæ [MSGLOG]\nüÜï ‚ûæ @id${context.user} (${context.text})`
				}).then((res) => {}).catch((error) => {console.log('–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'); });
      }
	if(context.text){}

    try {
        await next();
    } catch (err) { console.error(err) }
});

//////////////////////////////////////////////////////////////////////
vk.updates.hear(/^(?:!–ø—Ä–æ—Ñ–∏–ª—å|!–ø—Ä–æ—Ñ|üë• –ü—Ä–æ—Ñ–∏–ª—å)\s?([0-9]+)?/i, (context) => {
  let user = users[context.user]
  let target = context.$match[1];
  if(!target){
    return context.send(`
    &#128100; [${user.Prefix}] ${user.Nick}, ${user.Class}
    &#127380; ID: ${context.user}
    üåü –°—Ç–∞—Ç—É—Å: ${user.Dostup.toString().replace(/0/gi, "–û–±—ã—á–Ω—ã–π").replace(/1/gi, "VIP ").replace(/2/gi, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ")}

    üì∂ –£—Ä–æ–≤–µ–Ω—å: ${user.Level} | ${user.Exp} / ${user.Level * user.Level + 5}
          ‚öú –†–∞–Ω–≥: ${user.Rang.toString().replace(/0/gi, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω").replace(/1/gi, "–§–∞—Ä—Ñ–æ—Ä–æ–≤—ã–π").replace(/2/gi, "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤—ã–π ").replace(/3/gi, "–°—Ç–∞–ª—å–Ω–æ–π ").replace(/4/gi, "–°–∞–ø—Ñ–∏—Ä–æ–≤—ã–π ").replace(/5/gi, "–ò–∑—É–º—Ä—É–¥–Ω—ã–π ").replace(/6/gi, "–†—É–±–∏–Ω–æ–≤—ã–π  ").replace(/7/gi, "–ë—Ä–æ–Ω–∑–æ–≤—ã–π  ").replace(/8/gi, "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π  ").replace(/9/gi, "–ó–æ–ª–æ—Ç–æ–π  ").replace(/10/gi, "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π  ")}

    üÉè –û—á–∫–∏ –≤–æ–∑–Ω–µ—Å–µ–Ω–∏—è: ${user.Points}
    &#128176; –ó–æ–ª–æ—Ç–∞: ${spaces(user.Gold)}
    üîë –ö–ª—é—á–µ–π –æ—Ç —è—â–∏–∫–æ–≤:
                ‚ö™ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏: ${user.ResKey}
                ‚ö´ —Å –æ—Ä—É–∂–∏–µ–º: ${user.ItemKey}

    üîØ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    ‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: ${user.HP}
    ‚öî –ê—Ç–∞–∫–∞: ${user.DMG}
    `)
  }else{
    user = users[target]
    if(user){
      return context.send(`
      &#128100; [${user.Prefix}] ${user.Nick}, ${user.Class}
      &#127380; ID: ${target}
      üåü –°—Ç–∞—Ç—É—Å: ${user.Dostup.toString().replace(/0/gi, "–û–±—ã—á–Ω—ã–π").replace(/1/gi, "VIP ").replace(/2/gi, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ")}

      üì∂ –£—Ä–æ–≤–µ–Ω—å: ${user.Level} | ${user.Exp} / ${user.Level * user.Level + 5}
            ‚öú –†–∞–Ω–≥: ${user.Rang.toString().replace(/0/gi, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω").replace(/1/gi, "–§–∞—Ä—Ñ–æ—Ä–æ–≤—ã–π").replace(/2/gi, "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤—ã–π ").replace(/3/gi, "–°—Ç–∞–ª—å–Ω–æ–π ").replace(/4/gi, "–°–∞–ø—Ñ–∏—Ä–æ–≤—ã–π ").replace(/5/gi, "–ò–∑—É–º—Ä—É–¥–Ω—ã–π ").replace(/6/gi, "–†—É–±–∏–Ω–æ–≤—ã–π  ").replace(/7/gi, "–ë—Ä–æ–Ω–∑–æ–≤—ã–π  ").replace(/8/gi, "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π  ").replace(/9/gi, "–ó–æ–ª–æ—Ç–æ–π  ").replace(/10/gi, "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π  ")}

      üÉè –û—á–∫–∏ –≤–æ–∑–Ω–µ—Å–µ–Ω–∏—è: ${user.Points}
      &#128176; –ó–æ–ª–æ—Ç–∞: ${spaces(user.Gold)}
      üîë –ö–ª—é—á–µ–π –æ—Ç —è—â–∏–∫–æ–≤:
                  ‚ö™ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏: ${user.ResKey}
                  ‚ö´ —Å –æ—Ä—É–∂–∏–µ–º: ${user.ItemKey}

      üîØ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      ‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: ${user.HP}
      ‚öî –ê—Ç–∞–∫–∞: ${user.DMG}
      `)
    }
    return context.send(`üîî ‚ûæ –ò–≥—Ä–æ–∫ "${target}" –Ω–µ –Ω–∞–π–¥–µ–Ω`)
  }
});
//////////////////////////////////////////////////////////////////////

function data() {
		var date = new Date();
		let days = date.getDate();
		let month = date.getMonth() + 1;
		if (month < 10) month = "0" + month;
		if (days < 10) days = "0" + days;
		var datas = '2020-' + month + '-' + days;
		return datas;
	}

function rand(min, max) {return Math.round(Math.random() * (max - min)) + min}
var parserInt = (str) => parseInt(str.replace(/k|–∫/ig, "000"));
function spaces(string) {
if (typeof string !== "string") string = string.toString();
	return string.split("").reverse().join("").match(/[0-9]{1,3}/g).join(".").split("").reverse().join("");
};
Array.prototype.random = function() {
	return this[Math.floor(this.length * Math.random())];
}

console.log("Working...");
api.messages.send({
  user_id: 270911031,
  message: `üîî ‚ûæ [MSGLOG]\nüÜï ‚ûæ –£—Å–ø–µ—à–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ!`,
  keyboard: Keyboard.keyboard([[]])
}).then((res) => {}).catch((error) => {console.log('–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∫–ª—é—á–µ–Ω–∏–∏'); });
vk.updates.start().catch(console.error);
